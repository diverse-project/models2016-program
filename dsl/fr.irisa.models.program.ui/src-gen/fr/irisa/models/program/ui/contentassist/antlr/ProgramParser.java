/*
 * generated by Xtext
 */
package fr.irisa.models.program.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.irisa.models.program.services.ProgramGrammarAccess;

public class ProgramParser extends AbstractContentAssistParser {
	
	@Inject
	private ProgramGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.irisa.models.program.ui.contentassist.antlr.internal.InternalProgramParser createParser() {
		fr.irisa.models.program.ui.contentassist.antlr.internal.InternalProgramParser result = new fr.irisa.models.program.ui.contentassist.antlr.internal.InternalProgramParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTalkTypeAccess().getAlternatives(), "rule__TalkType__Alternatives");
					put(grammarAccess.getRoomAccess().getAlternatives(), "rule__Room__Alternatives");
					put(grammarAccess.getWeekDayAccess().getAlternatives(), "rule__WeekDay__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getDayAccess().getGroup(), "rule__Day__Group__0");
					put(grammarAccess.getDayAccess().getGroup_2(), "rule__Day__Group_2__0");
					put(grammarAccess.getSessionAccess().getGroup(), "rule__Session__Group__0");
					put(grammarAccess.getSessionAccess().getGroup_7(), "rule__Session__Group_7__0");
					put(grammarAccess.getTalkAccess().getGroup(), "rule__Talk__Group__0");
					put(grammarAccess.getTalkAccess().getGroup_2(), "rule__Talk__Group_2__0");
					put(grammarAccess.getTalkAccess().getGroup_4(), "rule__Talk__Group_4__0");
					put(grammarAccess.getTalkAccess().getGroup_4_1(), "rule__Talk__Group_4_1__0");
					put(grammarAccess.getTalkAccess().getGroup_4_1_1(), "rule__Talk__Group_4_1_1__0");
					put(grammarAccess.getProgramAccess().getDaysAssignment_0(), "rule__Program__DaysAssignment_0");
					put(grammarAccess.getProgramAccess().getDaysAssignment_1(), "rule__Program__DaysAssignment_1");
					put(grammarAccess.getDayAccess().getWeekDayAssignment_0(), "rule__Day__WeekDayAssignment_0");
					put(grammarAccess.getDayAccess().getSessionsAssignment_2_0(), "rule__Day__SessionsAssignment_2_0");
					put(grammarAccess.getDayAccess().getSessionsAssignment_2_1(), "rule__Day__SessionsAssignment_2_1");
					put(grammarAccess.getSessionAccess().getNameAssignment_2(), "rule__Session__NameAssignment_2");
					put(grammarAccess.getSessionAccess().getStartAssignment_4(), "rule__Session__StartAssignment_4");
					put(grammarAccess.getSessionAccess().getEndAssignment_6(), "rule__Session__EndAssignment_6");
					put(grammarAccess.getSessionAccess().getTalksAssignment_7_0(), "rule__Session__TalksAssignment_7_0");
					put(grammarAccess.getSessionAccess().getTalksAssignment_7_1(), "rule__Session__TalksAssignment_7_1");
					put(grammarAccess.getTalkAccess().getTypeAssignment_0(), "rule__Talk__TypeAssignment_0");
					put(grammarAccess.getTalkAccess().getTilteAssignment_2_0(), "rule__Talk__TilteAssignment_2_0");
					put(grammarAccess.getTalkAccess().getRoomAssignment_3(), "rule__Talk__RoomAssignment_3");
					put(grammarAccess.getTalkAccess().getSpeakersAssignment_4_1_0(), "rule__Talk__SpeakersAssignment_4_1_0");
					put(grammarAccess.getTalkAccess().getSpeakersAssignment_4_1_1_1(), "rule__Talk__SpeakersAssignment_4_1_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.irisa.models.program.ui.contentassist.antlr.internal.InternalProgramParser typedParser = (fr.irisa.models.program.ui.contentassist.antlr.internal.InternalProgramParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ProgramGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ProgramGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
