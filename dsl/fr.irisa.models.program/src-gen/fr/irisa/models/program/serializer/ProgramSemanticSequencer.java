/*
 * generated by Xtext
 */
package fr.irisa.models.program.serializer;

import com.google.inject.Inject;
import fr.irisa.models.program.program.Day;
import fr.irisa.models.program.program.Program;
import fr.irisa.models.program.program.ProgramPackage;
import fr.irisa.models.program.program.Session;
import fr.irisa.models.program.program.Talk;
import fr.irisa.models.program.services.ProgramGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class ProgramSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ProgramGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ProgramPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ProgramPackage.DAY:
				sequence_Day(context, (Day) semanticObject); 
				return; 
			case ProgramPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case ProgramPackage.SESSION:
				sequence_Session(context, (Session) semanticObject); 
				return; 
			case ProgramPackage.TALK:
				sequence_Talk(context, (Talk) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Day returns Day
	 *
	 * Constraint:
	 *     (weekDay=WeekDay (sessions+=Session sessions+=Session*)?)
	 */
	protected void sequence_Day(ISerializationContext context, Day semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (days+=Day days+=Day*)
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Session returns Session
	 *
	 * Constraint:
	 *     (name=STRING start=STRING end=STRING (talks+=Talk talks+=Talk*)?)
	 */
	protected void sequence_Session(ISerializationContext context, Session semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Talk returns Talk
	 *
	 * Constraint:
	 *     (type=TalkType tilte=STRING? room=Room (speakers+=STRING speakers+=STRING*)?)
	 */
	protected void sequence_Talk(ISerializationContext context, Talk semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
