/*
 * generated by Xtext
 */
package fr.irisa.models.program.generator

import fr.irisa.models.program.program.Day
import fr.irisa.models.program.program.Room
import fr.irisa.models.program.program.Session
import fr.irisa.models.program.program.Talk
import java.util.ArrayList
import java.util.HashMap
import java.util.HashSet
import java.util.List
import java.util.Map
import java.util.Set
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ProgramGenerator implements IGenerator {
	
	private val List<Day> days = new ArrayList
	private val Map<Day,List<Room>> roomsPerDay = new HashMap
	private val Map<Day,List<Session>> sessionsPerDay = new HashMap
	private val Map<Session,Map<Room,List<Talk>>> talksPerRoomPerSession = new HashMap
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		days.clear
		roomsPerDay.clear
		sessionsPerDay.clear
		talksPerRoomPerSession.clear
		val List<Room> rooms = resource.allContents.filter(typeof(Room)).toList
		days.addAll(resource.allContents.filter(typeof(Day)).toList)
		days.forEach[d|
			val List<Session> sessions = d.sessions
			val Set<Room> roomsOfTheDay = new HashSet
			sessions.forEach[s|roomsOfTheDay.addAll(s.talks.map[t|t.room])]
			val List<Room> result = new ArrayList(roomsOfTheDay.sortWith([r1,r2|
				return rooms.indexOf(r1) - rooms.indexOf(r2)
			]))
			roomsPerDay.put(d,result)
			sessionsPerDay.put(d,sessions)
			sessions.forEach[s|
				val List<Talk> talks = s.talks
				talks.forEach[t|
					var Map<Room,List<Talk>> talksPerRoom = talksPerRoomPerSession.get(s)
					if (talksPerRoom == null) {
						talksPerRoom = new HashMap
						talksPerRoomPerSession.put(s,talksPerRoom)
					}
					var List<Talk> talksInRoom = talksPerRoom.get(t.room)
					if (talksInRoom == null) {
						talksInRoom = new ArrayList
						talksPerRoom.put(t.room, talksInRoom)
					}
					talksInRoom.add(t)
				]
			]
		]
		fsa.generateFile('data.js', 'var data = ' + generate)
	}
	
	def String generate() {
		return
				'''
					[
						«FOR d : days SEPARATOR ","»
						{
							name : "«d.weekDay»",
							rooms : [
								«val roomsOfDay = roomsPerDay.get(d)»
								«FOR r : roomsOfDay SEPARATOR ","»
								"«r»"
								«ENDFOR»
							],
							sessions : [
								«FOR s : d.sessions»
								{
									name : "«s.name»",
									start : "«s.start»",
									end : "«s.end»",
									talkGroups : [
										«val talksPerRoom = talksPerRoomPerSession.get(s)»
										«IF talksPerRoom == null»
										[]
										«ELSE»
										«FOR r : roomsOfDay SEPARATOR ","»
										[
											«val talksInRoom = talksPerRoom.get(r)»
											«IF talksInRoom == null»
											{}
											«ELSE»
											«FOR t : talksInRoom SEPARATOR ","»
											{
												«val hasSpeakers = t.speakers != null && !t.speakers.empty»
												title: "«t.tilte»"«IF hasSpeakers»,«ENDIF»
												«IF hasSpeakers»
												speakers: «FOR sp : t.speakers SEPARATOR ","»"«sp»"«ENDFOR»
												«ENDIF»
											}
											«ENDFOR»
											«ENDIF»
										]
										«ENDFOR»
										«ENDIF»
									]
								}
								«ENDFOR»
							]
						}
						«ENDFOR»
					]
				'''
	}
}
