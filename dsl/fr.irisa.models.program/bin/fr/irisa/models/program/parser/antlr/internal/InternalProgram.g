/*
 * generated by Xtext
 */
grammar InternalProgram;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.irisa.models.program.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.irisa.models.program.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.irisa.models.program.services.ProgramGrammarAccess;

}

@parser::members {

 	private ProgramGrammarAccess grammarAccess;
 	
    public InternalProgramParser(TokenStream input, ProgramGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected ProgramGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='Rooms' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getRoomsKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getRoomsRoomParserRuleCall_0_1_0()); 
	    }
		lv_rooms_1_0=ruleRoom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"rooms",
        		lv_rooms_1_0, 
        		"Room");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getRoomsRoomParserRuleCall_0_2_0()); 
	    }
		lv_rooms_2_0=ruleRoom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"rooms",
        		lv_rooms_2_0, 
        		"Room");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_3='Days' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProgramAccess().getDaysKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getDaysDayParserRuleCall_1_1_0()); 
	    }
		lv_days_4_0=ruleDay		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"days",
        		lv_days_4_0, 
        		"Day");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getDaysDayParserRuleCall_1_2_0()); 
	    }
		lv_days_5_0=ruleDay		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"days",
        		lv_days_5_0, 
        		"Day");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleRoom
entryRuleRoom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoomRule()); }
	 iv_ruleRoom=ruleRoom 
	 { $current=$iv_ruleRoom.current; } 
	 EOF 
;

// Rule Room
ruleRoom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getRoomAccess().getNameSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRoomRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleDay
entryRuleDay returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDayRule()); }
	 iv_ruleDay=ruleDay 
	 { $current=$iv_ruleDay.current; } 
	 EOF 
;

// Rule Day
ruleDay returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDayAccess().getLeftSquareBracketKeyword_0());
    }
	otherlv_1='name' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDayAccess().getNameKeyword_1());
    }
(
(
		lv_name_2_0=RULE_STRING
		{
			newLeafNode(lv_name_2_0, grammarAccess.getDayAccess().getNameSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDayRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"STRING");
	    }

)
)(	otherlv_3='Sessions' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDayAccess().getSessionsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDayAccess().getSessionsSessionParserRuleCall_3_1_0()); 
	    }
		lv_sessions_4_0=ruleSession		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDayRule());
	        }
       		add(
       			$current, 
       			"sessions",
        		lv_sessions_4_0, 
        		"Session");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDayAccess().getSessionsSessionParserRuleCall_3_2_0()); 
	    }
		lv_sessions_5_0=ruleSession		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDayRule());
	        }
       		add(
       			$current, 
       			"sessions",
        		lv_sessions_5_0, 
        		"Session");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDayAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSession
entryRuleSession returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSessionRule()); }
	 iv_ruleSession=ruleSession 
	 { $current=$iv_ruleSession.current; } 
	 EOF 
;

// Rule Session
ruleSession returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSessionAccess().getLeftSquareBracketKeyword_0());
    }
	otherlv_1='name' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSessionAccess().getNameKeyword_1());
    }
(
(
		lv_name_2_0=RULE_STRING
		{
			newLeafNode(lv_name_2_0, grammarAccess.getSessionAccess().getNameSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSessionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='start' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSessionAccess().getStartKeyword_3());
    }
(
(
		lv_start_4_0=RULE_STRING
		{
			newLeafNode(lv_start_4_0, grammarAccess.getSessionAccess().getStartSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSessionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"start",
        		lv_start_4_0, 
        		"STRING");
	    }

)
)	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSessionAccess().getEndKeyword_5());
    }
(
(
		lv_end_6_0=RULE_STRING
		{
			newLeafNode(lv_end_6_0, grammarAccess.getSessionAccess().getEndSTRINGTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSessionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"end",
        		lv_end_6_0, 
        		"STRING");
	    }

)
)(	otherlv_7='Talks' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSessionAccess().getTalksKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSessionAccess().getTalksTalkParserRuleCall_7_1_0()); 
	    }
		lv_talks_8_0=ruleTalk		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSessionRule());
	        }
       		add(
       			$current, 
       			"talks",
        		lv_talks_8_0, 
        		"Talk");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSessionAccess().getTalksTalkParserRuleCall_7_2_0()); 
	    }
		lv_talks_9_0=ruleTalk		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSessionRule());
	        }
       		add(
       			$current, 
       			"talks",
        		lv_talks_9_0, 
        		"Talk");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_10=']' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSessionAccess().getRightSquareBracketKeyword_8());
    }
)
;





// Entry rule entryRuleTalk
entryRuleTalk returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTalkRule()); }
	 iv_ruleTalk=ruleTalk 
	 { $current=$iv_ruleTalk.current; } 
	 EOF 
;

// Rule Talk
ruleTalk returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTalkAccess().getLeftSquareBracketKeyword_0());
    }
	otherlv_1='title' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTalkAccess().getTitleKeyword_1());
    }
(
(
		lv_tilte_2_0=RULE_STRING
		{
			newLeafNode(lv_tilte_2_0, grammarAccess.getTalkAccess().getTilteSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tilte",
        		lv_tilte_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='room' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTalkAccess().getRoomKeyword_3());
    }
(
(
		lv_room_4_0=RULE_STRING
		{
			newLeafNode(lv_room_4_0, grammarAccess.getTalkAccess().getRoomSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"room",
        		lv_room_4_0, 
        		"STRING");
	    }

)
)(	otherlv_5='speakers' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTalkAccess().getSpeakersKeyword_5_0());
    }
(
(
		lv_speakers_6_0=RULE_STRING
		{
			newLeafNode(lv_speakers_6_0, grammarAccess.getTalkAccess().getSpeakersSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"speakers",
        		lv_speakers_6_0, 
        		"STRING");
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTalkAccess().getCommaKeyword_5_2_0());
    }
(
(
		lv_speakers_8_0=RULE_STRING
		{
			newLeafNode(lv_speakers_8_0, grammarAccess.getTalkAccess().getSpeakersSTRINGTerminalRuleCall_5_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"speakers",
        		lv_speakers_8_0, 
        		"STRING");
	    }

)
))*)?	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTalkAccess().getRightSquareBracketKeyword_6());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


